import React, { useState, ChangeEvent, FormEvent } from "react";
import Head from "next/head";
import Container from "react-bootstrap/Container";
import Footer from "@/components/Footer";
import Header from "@/components/Header";
import Button from 'react-bootstrap/Button';

const Contacts = () => {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    message: "",
  });
  const [status, setStatus] = useState("");

  // Tipagem para o evento de mudança no input
  const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault(); // Evita o comportamento padrão do navegador
    setStatus("Enviando...");
    try {
      const response = await fetch("/api/send-email", {
        method: "POST", // Especifica o método POST
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData), // Envia os dados do formulário
      });
      if (response.ok) {
        setStatus("Mensagem enviada com sucesso!");
        setFormData({ name: "", email: "", message: "" });
      } else {
        setStatus("Erro ao enviar a mensagem.");
      }
    } catch (error) {
      setStatus("Erro ao enviar a mensagem.");
    }
  };

  return (
    <>
      <Head>
        <title>Alef Devops</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/code-square.svg" />
      </Head>

      <Container as="main" className="py-4 px-3 mx-auto large-text">
        <Header />
      </Container>

      <div
        className="container"
        style={{
          maxWidth: "50%", // Reduz a largura pela metade
          margin: "0 auto", // Centraliza horizontalmente
          display: "flex", // Para centralizar verticalmente
          flexDirection: "column", // Alinha elementos na coluna
          justifyContent: "center", // Centraliza verticalmente
          minHeight: "25vh", // Garante que ocupa toda a altura da tela
        }}
      >
        <h2 className="text-center">Entre em Contato</h2> {/* Centraliza o texto */}
        <form onSubmit={handleSubmit}>
          <div className="mb-3">
            <label htmlFor="name" className="form-label">
              Nome:
            </label>
            <input
              type="text"
              id="name"
              name="name"
              className="form-control"
              value={formData.name}
              onChange={handleChange}
              required
            />
          </div>
          <div className="mb-3">
            <label htmlFor="email" className="form-label">
              Email:
            </label>
            <input
              type="email"
              id="email"
              name="email"
              className="form-control"
              value={formData.email}
              onChange={handleChange}
              required
            />
          </div>
          <div className="mb-3">
            <label htmlFor="message" className="form-label">
              Mensagem:
            </label>
            <textarea
              id="message"
              name="message"
              className="form-control"
              rows={5}
              value={formData.message}
              onChange={handleChange}
              required
            ></textarea>
          </div>
          <button type="submit" className="btn btn-primary w-100">
            Enviar
          </button>
        </form>
        {status && <Button variant="success" className="mt-3 text-center">{status}</Button>} {/* Centraliza a mensagem */}
      </div>
      <Footer />

    </>
  );
};

export default Contacts;
